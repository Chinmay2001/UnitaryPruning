using UnitaryPruning
"""
    involutory_transformation(o::PauliString{N}, g::PauliString{N}, t) where N

Evaluate the unitary transformation of `o` by the unitary generated by `g`: 

i.e. for the case where `o` and `g` don't commute:
```math
\\bar{\\hat{o}} = e^{it\\hat{g}}\\hat{o}e^{-it\\hat{g}} = cos(2t)\\hat{o} + i\\sin(2t)[\\hat{g}, \\hat{o}]
```
"""
function involutory_transformation(o::PauliString{N}, g::PauliString{N}, t) where N

end

function dfs(ham_ops, ham_par, ansatz_ops, ansatz_par, thresh)
o = ham_ops[2]
g = ansatz_ops[1]
print(o)
print(g)
println(commute(o,g))


end
